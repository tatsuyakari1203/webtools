# Dockerfile tích hợp Next.js Frontend + Python Backend
# Multi-stage build tối ưu dung lượng

# Stage 1: Python Backend Dependencies
FROM python:3.11-alpine AS python-deps
WORKDIR /backend

# Install system dependencies for Python packages
RUN apk add --no-cache \
    gcc \
    musl-dev \
    jpeg-dev \
    zlib-dev \
    freetype-dev \
    lcms2-dev \
    openjpeg-dev \
    tiff-dev \
    tk-dev \
    tcl-dev \
    harfbuzz-dev \
    fribidi-dev \
    libimagequant-dev \
    libxcb-dev \
    libpng-dev

# Copy requirements and install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Node.js Frontend Dependencies
FROM node:22-alpine AS node-deps
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache libc6-compat

# Copy package files
COPY package.json bun.lock* ./

# Install dependencies with bun for faster builds
RUN npm install -g bun && bun install --frozen-lockfile

# Stage 3: Frontend Builder
FROM node:22-alpine AS frontend-builder
WORKDIR /app

# Copy dependencies from node-deps stage
COPY --from=node-deps /app/node_modules ./node_modules

# Copy source code (exclude backend)
COPY package.json bun.lock* next.config.js tsconfig.json tailwind.config.ts postcss.config.mjs components.json ./
COPY src ./src
COPY public ./public

# Build the Next.js application
RUN npm install -g bun && bun run build

# Stage 4: Final Runtime Image
FROM python:3.11-alpine AS runtime
WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache \
    nodejs \
    npm \
    jpeg \
    zlib \
    freetype \
    lcms2 \
    openjpeg \
    tiff \
    tk \
    tcl \
    harfbuzz \
    fribidi \
    libimagequant \
    libxcb \
    libpng \
    supervisor

# Create non-root users
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs && \
    addgroup --system --gid 1002 python && \
    adduser --system --uid 1002 pythonuser

# Create backend directory and copy requirements.txt first
RUN mkdir -p /backend
COPY backend/requirements.txt /backend/requirements.txt

# Create virtual environment and install dependencies
USER pythonuser
RUN python3 -m venv /home/pythonuser/venv && \
    /home/pythonuser/venv/bin/pip install --upgrade pip && \
    /home/pythonuser/venv/bin/pip install --no-cache-dir -r /backend/requirements.txt
USER root

# Copy Python backend
COPY --chown=pythonuser:python backend /backend

# Create symlink for easier access (after copying backend)
RUN ln -sf /home/pythonuser/venv /backend/venv

# Copy Next.js standalone build
COPY --from=frontend-builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=frontend-builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=frontend-builder --chown=nextjs:nodejs /app/public ./public

# Create logs directories
RUN mkdir -p /backend/logs && chown pythonuser:python /backend/logs && \
    mkdir -p /var/log/supervisor

# Copy supervisor configuration
COPY <<EOF /etc/supervisor/conf.d/supervisord.conf
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:nextjs]
command=node server.js
directory=/app
user=nextjs
autorestart=true
stdout_logfile=/var/log/supervisor/nextjs.log
stderr_logfile=/var/log/supervisor/nextjs_error.log
environment=NODE_ENV=production,PORT=3000,HOSTNAME="0.0.0.0"

[program:python-backend]
command=/backend/venv/bin/python -m uvicorn app.main:app --host 0.0.0.0 --port 8000
directory=/backend
user=pythonuser
autorestart=true
stdout_logfile=/var/log/supervisor/python.log
stderr_logfile=/var/log/supervisor/python_error.log
environment=PATH="/home/pythonuser/.local/bin:%(ENV_PATH)s",PYTHONPATH="/backend"
EOF

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV BACKEND_HOST="0.0.0.0"
ENV BACKEND_PORT=8000
ENV PYTHONPATH=/backend

# Expose ports
EXPOSE 3000 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000 && \
        wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1

# Start supervisor to manage both services
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]